@page "/maintenance-requests"
@using System.Timers

<div class="maintenance-requests">
    <div class="header">
        <h3><i class="bi bi-tools"></i> Maintenance Requests</h3>
        <div class="search-filter">
            <input type="text" placeholder="Search by tenant or unit..." @bind="SearchQuery" @bind:event="oninput" class="search-input" />
            <i class="bi bi-search search-icon"></i>
        </div>
    </div>
    <div class="grid-container">
        <table class="request-grid">
            <thead>
                <tr>
                    <th><i class="bi bi-person"></i> Tenant</th>
                    <th><i class="bi bi-house-door"></i> Unit</th>
                    <th><i class="bi bi-wrench"></i> Issue</th>
                    <th><i class="bi bi-clock"></i> Status</th>
                    <th><i class="bi bi-calendar-event"></i> Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in FilteredRequests)
                {
                    <tr class="request-row @(request.IsNew ? "new" : "")" @onclick="() => ViewDetails(request)">
                        <td>@request.Tenant</td>
                        <td>@request.Unit</td>
                        <td>@request.Issue</td>
                        <td>
                            <span class="status @(request.Status.ToLower())">
                                @request.Status
                            </span>
                        </td>
                        <td>@request.Date.ToString("MMM dd, yyyy")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    /* Container */
    .maintenance-requests {
        background: linear-gradient(135deg, #f9fafc 0%, #e9f1f6 100%);
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.04);
        max-width: 1200px;
        margin: 20px auto;
    }

    /* Header */
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .header h3 {
            font-size: 1.5rem;
            color: #2d3748;
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .header i {
            color: #48bb78; /* Light green */
            font-size: 1.6rem;
        }

    /* Search Filter */
    .search-filter {
        position: relative;
    }

    .search-input {
        padding: 10px 35px 10px 15px;
        border: 1px solid #e2e8f0;
        border-radius: 25px;
        font-size: 0.9rem;
        color: #4a5568;
        background: #ffffff;
        width: 250px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .search-input:focus {
            border-color: #63b3ed;
            box-shadow: 0 0 8px rgba(99, 179, 237, 0.3);
            outline: none;
        }

    .search-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #a0aec0;
        font-size: 1rem;
    }

    /* Grid Container */
    .grid-container {
        max-height: 400px;
        overflow-y: auto;
        border-radius: 10px;
        background: #ffffff;
        box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.03);
        scrollbar-width: thin;
        scrollbar-color: #cbd5e0 #ffffff;
    }

        .grid-container::-webkit-scrollbar {
            width: 8px;
        }

        .grid-container::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 10px;
        }

        .grid-container::-webkit-scrollbar-track {
            background: #ffffff;
        }

    /* Request Grid */
    .request-grid {
        width: 100%;
        border-collapse: collapse;
    }

        .request-grid th {
            background: #edf2f7;
            color: #4a5568;
            font-size: 0.9rem;
            font-weight: 600;
            padding: 12px 15px;
            text-align: left;
            position: sticky;
            top: 0;
            z-index: 1;
        }

            .request-grid th i {
                margin-right: 6px;
                color: #718096;
            }

        .request-grid td {
            padding: 12px 15px;
            font-size: 0.85rem;
            color: #718096;
            border-bottom: 1px solid #edf2f7;
        }

    .request-row {
        transition: background 0.3s ease, transform 0.3s ease;
        cursor: pointer;
    }

        .request-row:hover {
            background: #f7fafc;
            transform: translateY(-2px);
        }

    .status {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

        .status.progress {
            background: #fefcbf;
            color: #b77919;
        }

        .status.resolved {
            background: #c6f6d5;
            color: #2f855a;
        }

        .status.pending {
            background: #fed7e2;
            color: #9b2c2c;
        }

    /* New Request Animation */
    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .request-row.new {
        animation: slideIn 0.5s ease;
        background: #f0fff4; /* Light green for new */
    }
</style>

@code {
    private string SearchQuery { get; set; } = string.Empty;

    private List<MaintenanceRequest> Requests { get; set; } = new()
    {
        new MaintenanceRequest { Tenant = "John Doe", Unit = "Unit 5", Issue = "Leaky faucet", Status = "Progress", Date = DateTime.Now.AddDays(-2) },
        new MaintenanceRequest { Tenant = "Jane Smith", Unit = "Unit 10", Issue = "Broken light", Status = "Resolved", Date = DateTime.Now.AddDays(-5) }
    };

    private List<MaintenanceRequest> FilteredRequests => Requests
        .Where(r => string.IsNullOrEmpty(SearchQuery) ||
                    r.Tenant.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    r.Unit.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private Timer RefreshTimer;

    protected override void OnInitialized()
    {
        // Set up real-time refresh every 6 seconds
        RefreshTimer = new Timer(6000);
        RefreshTimer.Elapsed += async (sender, e) => await RefreshRequests();
        RefreshTimer.AutoReset = true;
        RefreshTimer.Start();
    }

    private async Task RefreshRequests()
    {
        // Simulate real-time update
        var newRequest = new MaintenanceRequest
            {
                Tenant = $"Tenant {Requests.Count + 1}",
                Unit = $"Unit {Random.Shared.Next(1, 20)}",
                Issue = Random.Shared.Next(0, 3) switch
                {
                    0 => "Leaky pipe",
                    1 => "Faulty AC",
                    _ => "Broken window"
                },
                Status = Random.Shared.Next(0, 3) switch
                {
                    0 => "Pending",
                    1 => "Progress",
                    _ => "Resolved"
                },
                Date = DateTime.Now.AddDays(Random.Shared.Next(-10, 0)),
                IsNew = true
            };
        Requests.Insert(0, newRequest); // Add to top
        if (Requests.Count > 15) Requests.RemoveAt(Requests.Count - 1); // Limit to 15

        await InvokeAsync(StateHasChanged);
        // Reset 'new' status after animation
        await Task.Delay(1000);
        newRequest.IsNew = false;
        await InvokeAsync(StateHasChanged);
    }

    private void ViewDetails(MaintenanceRequest request)
    {
        // Simulate navigation or popup
        Console.WriteLine($"Viewing details for {request.Tenant}: {request.Issue} - {request.Status}");
    }

    public class MaintenanceRequest
    {
        public string Tenant { get; set; } = string.Empty;
        public string Unit { get; set; } = string.Empty;
        public string Issue { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public bool IsNew { get; set; }
    }

    public void Dispose()
    {
        RefreshTimer?.Dispose();
    }
}

<div class="urgent-notifications">
    <div class="header">
        <h3><i class="bi bi-exclamation-triangle-fill"></i> Urgent Notifications</h3>
    </div>
    <div class="notification-list">
        @foreach (var urgent in UrgentNotifications)
        {
            <div class="notification-card @(urgent.IsUrgent ? "urgent" : "critical") @(urgent.IsUnread ? "unread" : "")">
                <div class="icon"><i class="bi @(urgent.IsUrgent ? "bi-cash-stack" : "bi-tools")"></i></div>
                <div class="content">
                    <p class="title">@urgent.Title</p>
                    <p class="details">@urgent.Details</p>
                </div>
                <button class="action-btn" @onclick="() => ResolveNotification(urgent)">@urgent.ActionText</button>
            </div>
        }
    </div>
</div>

<style>
    /* Container */
    .urgent-notifications {
        background: linear-gradient(135deg, #f9fbfd 0%, #eef5fa 100%);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.03);
        max-width: 100%;
        overflow: hidden;
    }

    /* Header */
    .header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

        .header h3 {
            font-size: 1.4rem;
            color: #34495e;
            margin: 0;
            font-weight: 600;
        }

        .header i {
            color: #ff6b6b;
            margin-right: 8px;
            font-size: 1.5rem;
        }

    /* Notification List - Horizontal Scroll */
    .notification-list {
        display: flex;
        flex-direction: row;
        gap: 15px;
        overflow-x: auto;
        padding-bottom: 10px;
        scroll-behavior: smooth;
        scrollbar-width: thin;
        scrollbar-color: #d1dbe4 #f9fbfd;
    }

        .notification-list::-webkit-scrollbar {
            height: 6px;
        }

        .notification-list::-webkit-scrollbar-thumb {
            background: #d1dbe4;
            border-radius: 10px;
        }

        .notification-list::-webkit-scrollbar-track {
            background: #f9fbfd;
        }

    /* Notification Card */
    .notification-card {
        flex: 0 0 220px; /* Fixed width for side-by-side layout */
        display: flex;
        flex-direction: column;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 12px;
        padding: 12px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-left: 4px solid;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .notification-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        }

        .notification-card.urgent {
            border-left-color: #ff6b6b; /* Soft red */
        }

        .notification-card.critical {
            border-left-color: #ffa94d; /* Soft orange */
        }

        .notification-card .icon {
            font-size: 1.3rem;
            color: #74c0fc; /* Light blue */
            margin-bottom: 8px;
        }

        .notification-card .content {
            flex-grow: 1;
        }

        .notification-card .title {
            font-size: 0.95rem; /* Smaller text */
            font-weight: 500;
            color: #495057; /* Light grayish-dark */
            margin: 0;
            line-height: 1.2;
        }

        .notification-card .details {
            font-size: 0.75rem; /* Even smaller */
            color: #868e96; /* Light gray */
            margin: 4px 0 0;
            line-height: 1.3;
        }

        .notification-card .action-btn {
            background: #74c0fc; /* Light blue */
            color: #ffffff;
            border: none;
            padding: 5px 10px;
            border-radius: 6px;
            font-size: 0.8rem; /* Small text */
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
            margin-top: 8px;
        }

            .notification-card .action-btn:hover {
                background: #4dabf7;
                transform: scale(1.05);
            }

    /* Pulse Animation for Unread */
    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(255, 107, 107, 0.6);
        }

        70% {
            box-shadow: 0 0 0 8px rgba(255, 107, 107, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(255, 107, 107, 0);
        }
    }

    .notification-card.unread {
        animation: pulse 2s infinite;
    }
</style>

@code {
    private List<UrgentNotification> UrgentNotifications { get; set; } = new()
    {
        new UrgentNotification { Title = "Overdue Rent for Unit 5", Details = "$500 - Due 3 days ago", ActionText = "Resolve Now", IsUrgent = true, IsUnread = true },
        new UrgentNotification { Title = "Critical Maintenance Needed", Details = "Unit 10 - Reported 2 hrs ago", ActionText = "View Details", IsUrgent = false, IsUnread = true },
        new UrgentNotification { Title = "Payment Overdue Unit 8", Details = "$750 - Due 5 days ago", ActionText = "Resolve Now", IsUrgent = true, IsUnread = true },
        new UrgentNotification { Title = "Leak Reported Unit 3", Details = "Reported 1 hr ago", ActionText = "View Details", IsUrgent = false, IsUnread = true },
        new UrgentNotification { Title = "Overdue Rent for Unit 5", Details = "$500 - Due 3 days ago", ActionText = "Resolve Now", IsUrgent = true, IsUnread = true },
        new UrgentNotification { Title = "Critical Maintenance Needed", Details = "Unit 10 - Reported 2 hrs ago", ActionText = "View Details", IsUrgent = false, IsUnread = true },
        new UrgentNotification { Title = "Payment Overdue Unit 8", Details = "$750 - Due 5 days ago", ActionText = "Resolve Now", IsUrgent = true, IsUnread = true },
        new UrgentNotification { Title = "Leak Reported Unit 3", Details = "Reported 1 hr ago", ActionText = "View Details", IsUrgent = false, IsUnread = true }
    };

    private void ResolveNotification(UrgentNotification notification)
    {
        notification.IsUnread = false;
        Console.WriteLine($"Resolved: {notification.Title}");
        StateHasChanged();
    }

    public class UrgentNotification
    {
        public string Title { get; set; }
        public string Details { get; set; }
        public string ActionText { get; set; }
        public bool IsUrgent { get; set; }
        public bool IsUnread { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(5000); // Simulate new notification after 5 seconds
        UrgentNotifications.Add(new UrgentNotification
            {
                Title = "New Urgent Issue",
                Details = "Unit 12 - Reported now",
                ActionText = "Check Now",
                IsUrgent = true,
                IsUnread = true
            });
        StateHasChanged();
    }
}